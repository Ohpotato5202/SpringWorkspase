<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!--	===== root-context.xml ===== 
		: 어플리케이션 구동과 동시에 web.xml문서를 거쳐서 바로 로딩되는 문서
		
		-> 어플리케이션 시작과 동시에 설정해야 하는 내용들을 작성
			ex) DB연결, 트랜잭션 제어 설정
	-->
	
	<!--	===== DB연결 설정 3단계 =====  	-->
	<!-- 1) DB연결을 위한 도구 설정
		(아래의 과정을 자동화)
	 	BasicDataSource realDataSource = new BasicDataSource(); 
		realDataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
	-->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="C##SPRING" />
		<property name="password" value="SPRING" />
	</bean>
	
	<!-- SQL문과 ResultSet을 콘솔창에 출력하기 위한 도구 등록
	
		Log4jdbcProxyDataSource dataSource = new Log4jdbcProxyDataSource(realDataSource);
		dataSource.setLogFormatter(new Log4JdbcCustomFormatter());
	-->
	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="realDataSource"/>
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE"/>
				<property name="sqlPrefix" value="[SQL]"/>
			</bean>
		</property>
	</bean>
	
	<!-- 2) Mybatis Spring에서 제공하는 sql명령어 실행을 위한 도구 등록(SqlSessionFactory생성) 
	
		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
		sqlSessionFactory.setDataSource(dataSource);
	-->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		
		<!-- 연결을 위한 도구로 생성한 bean객체의 id값 제시 -->
		<property name="dataSource" ref="dataSource"/>
		
		<!-- 매퍼 등록 : 패턴을 지정하여 앞으로 생성할 모든 mapper파일을 한번에 읽어올 수 있음 -->
		<property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
	</bean>
	
	<!-- 3) SQL구문을 위한 템플릿을 제공하는 도구 등록 
		
		SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory);
	-->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<!-- sqlSession을 얻어내기 위한 도구 설정 -->
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	
	<!-- 트랜잭션 제어 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="realDataSource"/>
	</bean>
	
	<!--	property태그와 constructor-arg태그의 차이점
		- property : setter방식으로 값을 대입
			ex) name="url" -> setUrl(value값)
			
		- constructor-arg : 생성자 방식으로 값을 대입
			ex) new Bean(value/ref값)
	-->
	
			<!-- ========== DB 연결 끝 ========== -->
	
	
	<!-- ===== 업로드 되는 파일에 대한 설정 ===== -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 인코딩처리 -->
		<property name="defaultEncoding" value="UTF-8"/>
		
		<!-- 104857600byte == 100MB 
			기본값 : 10240byte (1KB)
			1MB == 1024KB == 1024 * 1024 byte
		-->
		<!-- <property name="maxUploadSizePerFile"/> 개별 파일 크기 설정 -->
		<property name="maxUploadSize" value="10000000"/>
		<property name="maxInMemorySize" value="10000000"/>
	</bean>
	
	
	
	
	
	
		
</beans>





